--- /var/www/html/wiki14org/includes/AuthPlugin.php	2005-03-09 03:26:46.000000000 -0600
+++ /var/www/html/wiki14/includes/AuthPlugin.php	2005-04-09 17:05:49.993574487 -0500
@@ -1,6 +1,9 @@
 <?php
+/**
+ * @package MediaWiki
+ */
 # Copyright (C) 2004 Brion Vibber <brion@pobox.com>
 # http://www.mediawiki.org/
 # 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -30,11 +33,10 @@
  * This interface is new, and might change a bit before 1.4.0 final is
  * done...
  *
  * @package MediaWiki
  */
-
 class AuthPlugin {
 	/**
 	 * Check whether there exists a user account with the given name.
 	 * The name will be normalized to MediaWiki's requirements, so
 	 * you might need to munge it (for instance, for lowercase initial
@@ -63,10 +65,60 @@
 	function authenticate( $username, $password ) {
 		# Override this!
 		return false;
 	}
 	
+       /**
+        * Modify options in the login template.
+        *
+        * @param UserLoginTemplate $template
+        * @access public
+        */
+        function modifyUITemplate( &$template ) {
+               #Override this!
+                $template->set( 'usedomain', false );
+       }
+
+        /**
+         * Set the domain this plugin is supposed to use when authenticating.
+         *
+         * @param string $domain
+         * @access public
+         */
+       function setDomain( $domain ) {
+               $this->domain = $domain;
+       }
+
+       /**
+        * Check to see if the specific domain is a valid domain.
+        *
+        * @param string $domain
+        * @return bool
+        * @access public
+        */
+       function validDomain( $domain ) {
+               #Override this!
+               return true;
+       }
+
+        /**
+         * When a user logs in, optionally fill in preferences and such.
+         * For instance, you might pull the email address or real name from the
+         * external user database.
+         *
+         * The User object is passed by reference so it can be modified; don't
+         * forget the & on your function declaration.
+         *
+         * @param User $user
+         * @access public
+         */
+       function updateUser( &$user ) {
+               #Override this and do something
+               return true;
+       }
+
+
 	/**
 	 * Return true if the wiki should create a new local account automatically
 	 * when asked to login a user who doesn't exist locally but does in the
 	 * external auth database.
 	 *
@@ -81,10 +133,48 @@
 	 */
 	function autoCreate() {
 		return false;
 	}
 	
+       /**
+        * Set the given password in the authentication database.
+        * Return true if successful.
+        *
+        * @param string $password
+        * @return bool
+        * @access public
+        */
+       function setPassword( $password ) {
+               return true;
+       }
+
+       /**
+        * Update user information in the external authentication database.
+        * Return true if successful.
+        *
+        * @param User $user
+        * @return bool
+        * @access public
+        */
+       function updateExternalDB( $user ) {
+               return true;
+       }
+
+       /**
+        * Add a user to the external authentication database.
+        * Return true if successful.
+        *
+        * @param User $user
+        * @param string $password
+        * @return bool
+        * @access public
+        */
+       function addUser( $user, $password ) {
+               return true;
+       }
+
+
 	/**
 	 * Return true to prevent logins that don't authenticate here from being
 	 * checked against the local database's password fields.
 	 *
 	 * This is just a question, and shouldn't perform any actions.
@@ -110,6 +200,6 @@
 	function initUser( &$user ) {
 		# Override this to do something.
 	}
 }
 
-?>
\ No newline at end of file
+?>
